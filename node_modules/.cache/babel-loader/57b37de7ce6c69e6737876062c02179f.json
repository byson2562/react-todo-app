{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { ulid } from 'ulid';\nimport * as todoData from '../apis/todos';\nexport const useTodo = () => {\n  _s();\n\n  const [todoList, setTodoList] = useState([]);\n  useEffect(() => {\n    todoData.getAllTodosData().then(todo => {\n      setTodoList([...todo].reverse());\n    });\n  }, []);\n  console.log(\"TODOリスト:\", todoList); // ステータス変更\n\n  const toggleTodoListItemStatus = (id, done) => {\n    const todoItem = todoList.find(item => item.id === id);\n    const newTodoItem = { ...todoItem,\n      done: !done\n    };\n    todoData.updateTodoData(id, newTodoItem).then(updatedTodo => {\n      const newTodoList = todoList.map(item => item.id !== updatedTodo.id ? item : updatedTodo);\n      setTodoList(newTodoList);\n    });\n  }; // 新規TODO追加\n\n\n  const addTodoListItem = todoContent => {\n    const newTodoItem = {\n      content: todoContent,\n      id: ulid(),\n      done: false\n    };\n    return todoData.addTodoData(newTodoItem).then(addTodo => {\n      setTodoList([addTodo, ...todoList]);\n    });\n  }; // TODO削除\n\n\n  const deleteTodoListItem = id => {\n    todoData.deleteTodoData(id).then(deleteListItemId => {\n      const newTodoList = todoList.filter(item => item.id !== deleteListItemId);\n      setTodoList(newTodoList);\n    });\n  };\n\n  return {\n    todoList,\n    toggleTodoListItemStatus,\n    addTodoListItem,\n    deleteTodoListItem\n  };\n};\n\n_s(useTodo, \"hGGsNTuaOn7oyphipNa0xsYj1Yc=\");","map":{"version":3,"sources":["/Users/tnakamura/git/react-reacthooks-lesson/todo-app/src/hooks/useTodo.js"],"names":["React","useState","useEffect","ulid","todoData","useTodo","todoList","setTodoList","getAllTodosData","then","todo","reverse","console","log","toggleTodoListItemStatus","id","done","todoItem","find","item","newTodoItem","updateTodoData","updatedTodo","newTodoList","map","addTodoListItem","todoContent","content","addTodoData","addTodo","deleteTodoListItem","deleteTodoData","deleteListItemId","filter"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,IAAT,QAAqB,MAArB;AACA,OAAO,KAAKC,QAAZ,MAA0B,eAA1B;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAM;AAAA;;AAE3B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,EAAD,CAAxC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdE,IAAAA,QAAQ,CAACI,eAAT,GAA2BC,IAA3B,CAAiCC,IAAD,IAAU;AACxCH,MAAAA,WAAW,CAAC,CAAC,GAAGG,IAAJ,EAAUC,OAAV,EAAD,CAAX;AACD,KAFD;AAGD,GAJQ,EAIN,EAJM,CAAT;AAMAC,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBP,QAAxB,EAV2B,CAY3B;;AACA,QAAMQ,wBAAwB,GAAG,CAACC,EAAD,EAAKC,IAAL,KAAc;AAC7C,UAAMC,QAAQ,GAAGX,QAAQ,CAACY,IAAT,CAAeC,IAAD,IAAUA,IAAI,CAACJ,EAAL,KAAYA,EAApC,CAAjB;AACA,UAAMK,WAAW,GAAG,EAAC,GAAGH,QAAJ;AAAcD,MAAAA,IAAI,EAAE,CAACA;AAArB,KAApB;AAEAZ,IAAAA,QAAQ,CAACiB,cAAT,CAAwBN,EAAxB,EAA4BK,WAA5B,EAAyCX,IAAzC,CAA+Ca,WAAD,IAAiB;AAC7D,YAAMC,WAAW,GAAGjB,QAAQ,CAACkB,GAAT,CAAcL,IAAD,IAC/BA,IAAI,CAACJ,EAAL,KAAYO,WAAW,CAACP,EAAxB,GAA6BI,IAA7B,GAAoCG,WADlB,CAApB;AAGAf,MAAAA,WAAW,CAACgB,WAAD,CAAX;AACD,KALD;AAMD,GAVD,CAb2B,CAyB3B;;;AACA,QAAME,eAAe,GAAIC,WAAD,IAAiB;AACvC,UAAMN,WAAW,GAAG;AAClBO,MAAAA,OAAO,EAAED,WADS;AAElBX,MAAAA,EAAE,EAAEZ,IAAI,EAFU;AAGlBa,MAAAA,IAAI,EAAE;AAHY,KAApB;AAMA,WAAOZ,QAAQ,CAACwB,WAAT,CAAqBR,WAArB,EAAkCX,IAAlC,CAAwCoB,OAAD,IAAY;AACxDtB,MAAAA,WAAW,CAAC,CAACsB,OAAD,EAAU,GAAGvB,QAAb,CAAD,CAAX;AACD,KAFM,CAAP;AAGD,GAVD,CA1B2B,CAsC3B;;;AACA,QAAMwB,kBAAkB,GAAIf,EAAD,IAAQ;AACjCX,IAAAA,QAAQ,CAAC2B,cAAT,CAAwBhB,EAAxB,EAA4BN,IAA5B,CAAkCuB,gBAAD,IAAsB;AACrD,YAAMT,WAAW,GAAGjB,QAAQ,CAAC2B,MAAT,CACjBd,IAAD,IAAUA,IAAI,CAACJ,EAAL,KAAYiB,gBADJ,CAApB;AAIAzB,MAAAA,WAAW,CAACgB,WAAD,CAAX;AACD,KAND;AAOD,GARD;;AAUA,SAAO;AACLjB,IAAAA,QADK;AAELQ,IAAAA,wBAFK;AAGLW,IAAAA,eAHK;AAILK,IAAAA;AAJK,GAAP;AAMD,CAvDM;;GAAMzB,O","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ulid } from 'ulid';\nimport * as todoData from '../apis/todos';\n\nexport const useTodo = () => {\n\n  const [todoList, setTodoList] = useState([]);\n\n  useEffect(() => {\n    todoData.getAllTodosData().then((todo) => {\n      setTodoList([...todo].reverse());\n    });\n  }, []);\n\n  console.log(\"TODOリスト:\", todoList);\n\n  // ステータス変更\n  const toggleTodoListItemStatus = (id, done) => {\n    const todoItem = todoList.find((item) => item.id === id);\n    const newTodoItem = {...todoItem, done: !done };\n\n    todoData.updateTodoData(id, newTodoItem).then((updatedTodo) => {\n      const newTodoList = todoList.map((item) =>\n        item.id !== updatedTodo.id ? item : updatedTodo\n      );\n      setTodoList(newTodoList);\n    });\n  };\n\n  // 新規TODO追加\n  const addTodoListItem = (todoContent) => {\n    const newTodoItem = {\n      content: todoContent,\n      id: ulid(),\n      done: false\n    };\n\n    return todoData.addTodoData(newTodoItem).then((addTodo)=> {\n      setTodoList([addTodo, ...todoList]);\n    });\n  };\n\n  // TODO削除\n  const deleteTodoListItem = (id) => {\n    todoData.deleteTodoData(id).then((deleteListItemId) => {\n      const newTodoList = todoList.filter(\n        (item) => item.id !== deleteListItemId\n      );\n\n      setTodoList(newTodoList);\n    });\n  };\n\n  return {\n    todoList,\n    toggleTodoListItemStatus,\n    addTodoListItem,\n    deleteTodoListItem\n  };\n};"]},"metadata":{},"sourceType":"module"}